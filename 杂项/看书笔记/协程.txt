C#协程的用法。
   
协程：协同程序，在主程序运行的同时，开启另外一段逻辑处理，来协同当前程序的执行，。

开启协程的两种方式

1、StartCoroutine(string methodName)

注意：

(1)、参数是方法名(字符串类型)，此方法可以包含一个参数

(2)、形参方法可以有返回值

 

2、StartCoroutine（IEnumerator method)

注意：

(1)、参数是方法名(TestMethod()),方法中可以包含多个参数

(2)、IEnumrator 类型的方法不能含有ref或者out 类型的参数，但可以含有被传递的引用

(3)、必须有有返回值，且返回值类型为IEnumrator,返回值使用（yield retuen +表达式或者值，或者 yield break）语句

终止协程的两种方式：

StopCoroutine (string methodName),只能终止指定的协程

使用时注意：

在程序中调用StopCoroutine() 方法只能终止以字符串形式启动的协程

 

StopAllCoroutine()，终止所有协程

 

yield：挂起，程序遇到yield关键字时会被挂起，暂停执行，等待条件满足时从当前位置继续执行

yield return 0 or yield return null:程序在下一帧中从当前位置继续执行

yield return 1,2,3,......: 程序等待1，2，3...帧之后从当前位置继续执行

yield return new WaitForSeconds(n):程序等待n秒后从当前位置继续执行

yield new WaitForEndOfFrame():在所有的渲染以及GUI程序执行完成后从当前位置继续执行

yield new WaitForFixedUpdate():所有脚本中的FixedUpdate()函数都被执行后从当前位置继续执行

yield return WWW:等待一个网络请求完成后从当前位置继续执行

yield return StartCoroutine():等待一个协程执行完成后从当前位置继续执行

 

yield break

如果使用yield break语句，将会导致协程的执行条件不被满足，不会从当前的位置继续执行程序，而是直接从当前位置跳出函数体，回到函数的根部

 

协程的执行原理

协程函数的返回值时IEnumerator,它是一个迭代器，可以把它当成执行一个序列的某个节点的指针，它提供了两个重要的接口，分别是Current(返回当前指向的元素)和MoveNext()(将指针向后移动一个单位，如果移动成功，则返回true)

yield关键词用来声明序列中的下一个值或者是一个无意义的值，如果使用yield return x(x是指一个具体的对象或者数值)的话，那么MoveNext返回为true并且Current被赋值为x,如果使用yield break使得MoveNext()返回为false

如果MoveNext函数返回为true意味着协程的执行条件被满足，则能够从当前的位置继续往下执行。否则不能从当前位置继续往下执行。